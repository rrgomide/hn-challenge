name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Lint and type checking
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm --filter @hn-challenge/shared build

      - name: Lint all packages
        run: pnpm lint

      - name: Type check all packages
        run: pnpm typecheck

  # Backend tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # MongoDB service for integration tests
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm --filter @hn-challenge/shared build

      - name: Run backend tests
        run: pnpm test:backend
        env:
          MONGODB_URI_DEV: mongodb://localhost:27017/hn-challenge-test
          MONGODB_URI_PROD: mongodb://localhost:27017/hn-challenge-test
          JWT_SECRET: test-secret-key-for-ci
          NODE_ENV: test

  # Frontend tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm --filter @hn-challenge/shared build

      - name: Run frontend tests
        run: pnpm test:frontend

  # Build Docker images and test them
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-typecheck, backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/backend/Dockerfile
          push: false
          tags: hn-challenge/backend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/frontend/Dockerfile
          push: false
          tags: hn-challenge/frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Test Docker Compose setup
        run: |
          # Create a test environment file
          cat > .env.test << EOF
          MONGODB_URI_PROD=mongodb://mongodb:27017/hn-challenge-prod
          JWT_SECRET=test-secret-for-docker
          NODE_ENV=production
          EOF

          # Test that services start properly
          docker compose -f docker-compose.yml --env-file .env.test up --build -d --wait
          
          # Health check - wait for services to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do sleep 2; done' || echo "Backend health check failed"
          timeout 60 bash -c 'until curl -f http://localhost:3030 2>/dev/null; do sleep 2; done' || echo "Frontend health check failed"
          
          # Check service logs for obvious errors
          docker compose logs --tail=50
          
          # Clean up
          docker compose down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Deployment preparation (only on main branch)
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, backend-tests, frontend-tests, docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment successful
        run: |
          echo "ðŸŽ‰ All checks passed! Ready for deployment."
          echo "âœ… Code linted and type-checked"
          echo "âœ… Backend tests passed"
          echo "âœ… Frontend tests passed" 
          echo "âœ… Docker images built successfully"
          echo "âœ… Security scan completed"

      - name: Create deployment artifact
        run: |
          echo "$(date): Build #${{ github.run_number }} - $(git rev-parse --short HEAD)" > deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> deployment-info.txt

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment-info.txt
          retention-days: 30